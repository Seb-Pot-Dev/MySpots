{% extends 'base.html.twig' %}

{% block title %}Hello SpotController!{% endblock %}

{% block body %}
<style>
    .example-wrapper { margin: 1em auto; max-width: 800px; width: 95%; font: 18px/1.5 sans-serif; }
    .example-wrapper code { background: #F5F5F5; padding: 2px 6px; }
</style>

<div class="example-wrapper">
    <h1>LA MAP</h1>

<!-- FORMULAIRE SPOT -->
<div class="form-add-spot">
<h2>Ajouter un spot</h2>
{{ form(formAddSpot) }}
</div>
<!-- AFFICHAGE DE LA MAP -->
<div id="map"></div>

<!-- Liste des spots -->

    <ul>
        {% for spot in spotsList %}
        <li><a href="{{ path('show_spot', {'id': spot.id}) }}">{{spot.name}}</a></li>
        {% endfor %}
    </ul>
</div>
{% endblock %}

{% block javascripts %}

    <!-- SCRIPT JS PERSO -->
    <script>

        // défini la manière dont la carte est centré et le zoom
        let map = L.map('map').setView([48.583328, 7.75], 14);

            // Ajouter une couche de tuiles OpenStreetMap à la carte, avec un maximum de zoom de 19 et une attribution
            L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
                maxZoom: 19,
                attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>'
            }).addTo(map);
            
            // Convertir un tableau TWIG en tableau JS
            const markersSpots = '{{ spots | raw }}';
            const tab = JSON.parse(markersSpots);

            // Parcourir le tableau et créer des marqueurs pour chaque élément
            tab.forEach(obj => {
                Object.entries(obj).forEach(([name, infos]) => { 
                    const lat = infos[0]
                    const lng = infos[1]
                    const desc = infos[2]

                    const marker = L.marker([lat, lng]).addTo(map);
                    marker.bindPopup(`<b>${name}</b><br>${desc}`);
                })
            })

                // Définir les coordonnées d'un polygone
                var polygonCoords = [  [48.623860, 7.727798],
                [48.604371, 7.693883],
                [48.575899, 7.686080],
                [48.568368, 7.729530],
                [48.556536, 7.741879],
                [48.540214, 7.740874],
                [48.520945, 7.753266],
                [48.517002, 7.802228],
                [48.525297, 7.830220],
                [48.548539, 7.848697],
                [48.563863, 7.858974],
                [48.586015, 7.840496],
                [48.605270, 7.820451],
                [48.610125, 7.795036],
                [48.623860, 7.727798]
                ];
                
                // Créer un polygone à partir des coordonnées stockées dans var polygonCoords et l'ajouter à la carte
                var myPolygon = L.polygon(polygonCoords, {
                    color: 'red',
                    fillColor: 'transparent',
                    weight: 2
                }).addTo(map);


//Créer un popup lorsque l'on clique sur un endroit non marked de la map et indique les coordonnées
    //stockage de la fonction popup() de Leaflet dans la variable popup
    var popup = L.popup();

function onMapClick(e) {
    popup
        .setLatLng(e.latlng)
        .setContent("You clicked the map at " + e.latlng.toString())
        .openOn(map);
}

map.on('click', onMapClick);
    </script>
{% endblock %}

