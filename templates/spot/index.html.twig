{% extends 'base.html.twig' %}

{% block title %}LA MAP{% endblock %}

{% block body %}
<link rel="stylesheet" href="{{ asset('css/map.css') }}">

<!-- Lien vers le fichier CSS de Mapbox -->
<link href='https://api.mapbox.com/mapbox-gl-js/v2.4.1/mapbox-gl.css' rel='stylesheet' />

</head>
<style>
</style>
    <h1>LA MAP</h1>

<!-- AFFICHAGE DE LA MAP --> 
<div id="map" class="">
</div>

<!-- Choix du layer -->
<div class="choose-layer-container">
    <button id="layer-1" class="choose-layer-item">Hell</button>
    <button id="layer-2" class="choose-layer-item">Dark</button>
    <button id="layer-3" class="choose-layer-item">Classic</button>
</div>
 <!-- ////////////////////////////////////////////////////////////////// -->
 {% if app.user %}  
 <!-- formulaire ajout spot -->
        <div id="form-spot-id" class="form-add-spot">
        <button id="closeFormSpotCross">
             <!--SVG cross pour fermer le form -->
            <svg fill="#000000" height="20px" width="20px" version="1.1" id="Capa_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" 
                viewBox="0 0 490 490" xml:space="preserve">
                <polygon points="456.851,0 245,212.564 33.149,0 0.708,32.337 212.669,245.004 0.708,457.678 33.149,490 245,277.443 456.851,490 
                489.292,457.678 277.331,245.004 489.292,32.337 "/>
            </svg>
        </button>
            {{ form_start(formAddSpot, {'attr': {'class': 'mx-auto p-4 bg-white shadow-md rounded-lg'}}) }}
                <h1 class="mb-2 text-xl font-medium">Propose ton spot</h1>
                <div class="">
                    {{ form_label(formAddSpot.name, 'Name', {'label_attr': {'class': 'block font-medium text-gray-700'}}) }}
                    {{ form_widget(formAddSpot.name, {'attr': {'class': 'w-full px-4 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500'}}) }}
                </div>
                <div class="">
                    {{ form_label(formAddSpot.description, 'Description', {'label_attr': {'class': 'block mb-2 font-medium text-gray-700'}}) }}
                    {{ form_widget(formAddSpot.description, {'attr': {'class': 'w-full px-4 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500'}}) }}
                </div>
                <div class="">
                    {{ form_label(formAddSpot.adress, 'Address', {'label_attr': {'class': 'block mb-2 font-medium text-gray-700'}}) }}
                    {{ form_widget(formAddSpot.adress, {'attr': {'class': 'w-full px-4 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500'}}) }}
                </div>
                <div class="">
                    {{ form_label(formAddSpot.cp, 'Postal Code', {'label_attr': {'class': 'block mb-2 font-medium text-black'}}) }}
                    {{ form_widget(formAddSpot.cp, {'attr': {'class': 'w-full px-4 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500'}}) }}
                </div>
                <div class="">
                    {{ form_label(formAddSpot.city, 'City', {'label_attr': {'class': 'block mb-2 font-medium text-black'}}) }}
                    {{ form_widget(formAddSpot.city, {'attr': {'class': 'w-full px-4 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500'}}) }}
                </div>
                <button id="add-user-pos">Utiliser ma position</button>
                <div class="">
                    {{ form_label(formAddSpot.lat, 'Latitude', {'label_attr': {'class': 'block mb-2 font-medium text-black'}}) }}
                    {{ form_widget(formAddSpot.lat, {'attr': {'class': 'w-full px-4 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500'}}) }}
                </div>
                <div class="">
                    {{ form_label(formAddSpot.lng, 'Longitude', {'label_attr': {'class': 'block mb-2 font-medium text-black'}}) }}
                    {{ form_widget(formAddSpot.lng, {'attr': {'class': 'w-full px-4 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500'}}) }}
                </div>
                <div class="">
                    {{ form_label(formAddSpot.modules, 'Modules', {'label_attr': {'class': 'block mb-2 font-medium text-black'}}) }}
                    {{ form_widget(formAddSpot.modules, {'attr': {'class': 'w-full px-4 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500'}}) }}
                </div>
                <div class="">
                    {{ form_label(formAddSpot.pictures, 'Pictures', {'label_attr': {'class': 'block mb-2 font-medium text-gray-700'}}) }}
                    {{ form_widget(formAddSpot.pictures, {'attr': {'class': 'w-full px-4 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500'}}) }}
                </div>
            

                {# <button type="submit" class="w-full px-4 py-2 mt-4 text-white bg-blue-500 rounded-lg hover:bg-blue-600">Submit</button> #}
            {{ form_end(formAddSpot) }}
        </div>
    {% else %}
        <p>Veuillez vous connecter pour ajouter un spot.</p>
    {% endif %}

<div class="list-spots-desktop">
 {% if app.user %}
    <div class="add-spot-title-container">
        <p>Ajouter un spot? </p>
        
        <div class="toggle-wrapper" id="toggle-wrapper-id">
            <input class="toggle-checkbox" type="checkbox">
            <div class="toggle-container">  
                <div class="toggle-button">
                <div class="toggle-button-circles-container">
                    <div class="toggle-button-circle"></div>
                    <div class="toggle-button-circle"></div>
                    <div class="toggle-button-circle"></div>
                    <div class="toggle-button-circle"></div>
                    <div class="toggle-button-circle"></div>
                    <div class="toggle-button-circle"></div>
                    <div class="toggle-button-circle"></div>
                    <div class="toggle-button-circle"></div>
                    <div class="toggle-button-circle"></div>
                    <div class="toggle-button-circle"></div>
                    <div class="toggle-button-circle"></div>
                    <div class="toggle-button-circle"></div>
                </div>
                </div>
            </div>
        </div>
    </div>
{% endif %}
<div class="search-filters-container">
    {{ form_start(formSearch, {'attr': {'id': 'search-form', 'class': 'my-custom-class'}}) }}
        {# Barre de recherche #}
        {{ form_row(formSearch.search) }}
        {# Choix des modules #}
        <p>Filtrer par module:</p>
        {% for module in formSearch.moduleFilter %}
            <label class="flex items-baseline mr-4">
                {{ form_widget(module, {'attr': {'class': 'mr-2'}}) }}
                {{ form_label(module) }}
            </label>
        {% endfor %}
        <p>Autres critères:</p>
        <label class="flex items-baseline mr-4">
            {{ form_widget(formSearch.official, {'attr': {'class': 'mr-2'}}) }}
            {{ form_label(formSearch.official) }}
        </label>
        <label class="flex items-baseline mr-4">
            {{ form_widget(formSearch.covered, {'attr': {'class': 'mr-2'}}) }}
            {{ form_label(formSearch.covered) }}
        </label>
        <label class="flex items-baseline mr-4">
            {{ form_label(formSearch.orderCreation) }}
            {{ form_widget(formSearch.orderCreation, {'attr': {'class': 'mr-2'}}) }}
        </label>
        <button type="submit">Search</button>
        <a href="{{ path('app_spot') }}" class="btn btn-secondary">Réinitialiser</a>
    {{ form_end(formSearch) }}

    {% if filtersEmpty == true %}
        <p>Aucun spot ne correspond à ces critères sorry boy</p> 
    {% else %}
    <div class="inline-flex">
        <p>Résultats({{ spotsFiltered|length }}):</p>
    </div>
    {% endif %}
</div>
<!-- LISTE DES SPOTS SUR LA MAP EN ABSOLUTE -->
 <ul class="list-spots" style="">
 {% if spotsFiltered %}
        <!-- Boucle sur chaques éléments Spot récupérés du controller par la variable paginationSpots, qui permet la pagination grâce au bundle Knp Paginator
    {% for spot in spotsFiltered %}
        {% include 'spot/_list_spots.html.twig' %}
    {% endfor %}
{% else %}
    {% for spot in spotsList %}
        {% include 'spot/_list_spots.html.twig' %}
    {% endfor %}
 {% endif %}
            
    </ul>
    {# <div class="js-filter-pagination">
        Affichage des liens de pagination
        {{ knp_pagination_render(paginationSpots) }}
    </div> #}
</div>

<!-- Liste des spots SOUS LA MAP -->
    <ul class="list-spots" style="display:none;">
        {% for spot in spotsList|sort((a, b)=>b.name<=>a.name) %}
            {% if spot.isValidated %}
            <!-- lien -->
                <a href="{{ path('show_spot', {'idSpot': spot.id}) }}">
                <li>
                    <div class="left">
                    <!-- nom du spot -->
                            <!-- défini spotName comme le nom du spot -->
                            {% set spotName = spot.name %}
                            <!-- afficher spotName et mettre la première lettre en MAJ 
                            + limiter au 10 premiers charactères -->
                            {{spotName|capitalize|slice(0, 10)}}
                            <!-- Si le nom du spot était supérieur a 10 -->
                            {% if spotName | length > 10 %}...{% endif %}
                    </div>
                    <div class="right">
                        <!-- nb likes du spot -->
                        {% if app.user %} <!-- si le user est co, il peut liker-->
                        <a href="{{ path('like_spot', {'idSpot': spot.id, 'idUser': app.user.id}) }}">    
                        {% endif %}
                        <i class="fa-regular fa-heart" alt='nb-likes'></i>({{ spot.favoritedByUsers | length }})
                        </a>

                        <!-- note -->
                        {% if spot.avgNote is not null %}
                        <i class="fa-regular fa-star"></i>({{spot.avgNote}})
                        {% else %}
                        <i class="fa-regular fa-star"></i>(0)
                        {% endif %}

                        <!-- nb comments spot -->
                        <i class="fa-regular fa-message"></i>({{ spot.comments | length }})
                        {% if  is_granted('ROLE_ADMIN') %}

                        <!-- supprimer le spot -->
                        <a href="{{ path('deleteSpot_admin', {'id':spot.id}) }}"><i class="fa-regular fa-trash-can"></i></a>

                        <!-- modifier le spot -->
                        <a href="{{ path('edit_spot', {'id':spot.id}) }}"><i class="fa-regular fa-pen-to-square"></i></a>

                        {% endif %}
                    </div>
                </li>
                </a> 
            {% endif %}

        {% endfor %}
    </ul>


{% endblock %}

{% block javascripts %}
<!-- Parametres Leaflet -->
    <script>
// défini une variable marqueur quelconque pour le click sur la carte
let marqueur

// défini la manière dont la carte est centré et le zoom
let map = L.map('map').setView([48.583328, 7.75], 14);

// Tile layer de base CLASSIC (white)
var default_layer = L.tileLayer('https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}{r}.png', {
    maxZoom: 22,
    attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>'
});
// Tile layer de ThunderForest "Spinal Map" (HELL) (API KEY : 396269ca3cfb446d96f2e63dd998a5b9)
var Thunderforest_SpinalMap = L.tileLayer('https://{s}.tile.thunderforest.com/spinal-map/{z}/{x}/{y}.png?apikey={apikey}', {
	attribution: '&copy; <a href="http://www.thunderforest.com/">Thunderforest</a>, &copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
	apikey: '396269ca3cfb446d96f2e63dd998a5b9',
	maxZoom: 22
});
// Tile layer de Jawg Lab "DARK" (API KEY : UruJTpSBYzy3a17xRdwM4O3RGfWF3EWeeFJMUkQKcRHyyAlYMB5LEx7wxl4ppHd8)
var Jawg_Dark = L.tileLayer('https://{s}.tile.jawg.io/jawg-dark/{z}/{x}/{y}{r}.png?access-token={accessToken}', {
	attribution: '<a href="http://jawg.io" title="Tiles Courtesy of Jawg Maps" target="_blank">&copy; <b>Jawg</b>Maps</a> &copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
	minZoom: 0,
	maxZoom: 22,
	subdomains: 'abcd',
	accessToken: 'UruJTpSBYzy3a17xRdwM4O3RGfWF3EWeeFJMUkQKcRHyyAlYMB5LEx7wxl4ppHd8'
})
.addTo(map); // Définition du layer par défaut

var tileLayer1 = document.getElementById('layer-1');
var tileLayer2 = document.getElementById('layer-2');
var tileLayer3 = document.getElementById('layer-3');

function ChooseTileLayer1(){
    map.removeLayer(Jawg_Dark);
    map.removeLayer(default_layer);
    Thunderforest_SpinalMap.addTo(map);
}
function ChooseTileLayer2(){
    map.removeLayer(default_layer);
    map.removeLayer(Thunderforest_SpinalMap);
    Jawg_Dark.addTo(map);
}
function ChooseTileLayer3(){
    map.removeLayer(Thunderforest_SpinalMap);
    map.removeLayer(Jawg_Dark);
    default_layer.addTo(map);
}

tileLayer1.addEventListener('click', ChooseTileLayer1);
tileLayer2.addEventListener('click', ChooseTileLayer2);
tileLayer3.addEventListener('click', ChooseTileLayer3);
if (typeof toggleButton == "undefined") {
    console.log('helo');
// définition du switch toggle-night-mode
var toggleButton = document.getElementById("toggle-night-mode");}
// Si click sur le switch dark mode, changer le fond en noir
toggleButton.addEventListener("click", () => {
// Choix de la carte DARK
ChooseTileLayer2();
});
// Si choix du dark mode, afficher en noir, sinon, en blanc
if (sessionStorage.getItem("nightMode") === "true") {
    ChooseTileLayer2();
}
else{
    ChooseTileLayer3();
}


// GEOLOCALISATION
// Demande la géolocalisation de l'utilisateur et commence à suivre les mises à jour de position.
navigator.geolocation.watchPosition(success, error);

// en cas de succès
function success(userPosition) {
    // Lorsque la géolocalisation est obtenue avec succès, stocke la latitude et la longitude dans des variables globales.
    window.userLat = userPosition.coords.latitude;
    window.userLng = userPosition.coords.longitude;
    window.isUserLocationKnown = true;

    // Obtient la précision des données de géolocalisation.
    var accuracy = userPosition.coords.accuracy;

    //icon custom pour l'emplacement de l'utilisateur
    var youAreHereIcon = L.icon({
        iconUrl: 'https://png.pngtree.com/png-vector/20230320/ourmid/pngtree-you-are-here-location-pointer-vector-png-image_6656543.png',
        iconSize: [60, 60],
        iconAnchor: [22, 94],
        popupAnchor: [-3, -76],
        shadowAnchor: [22, 94],
    })
    // Ajoute un marqueur sur la carte à l'emplacement de l'utilisateur.
    L.marker([userLat, userLng], {icon: youAreHereIcon, title: 'Vous êtes ici',
        alt: 'Marqueur "vous êtes ici"'}).addTo(map);
    
    // Ajoute un cercle sur la carte représentant la précision de la position de l'utilisateur.
    // L.circle([userLat, userLng], { radius: accuracy }).addTo(map);
}

// en cas d'erreur
function error(err){
    // En cas d'erreur lors de la géolocalisation, indique que la position de l'utilisateur n'est pas connue.
    window.isUserLocationKnown = false;
    if(err.code === 1){
        alert("Veuillez autoriser l'accès à la géolocalisation pour une expérience optimale.");
    }else{
        alert("Impossible d'obtenir la position actuelle pour le moment.");
    }
}

const btnAddUserLoc = document.querySelector('#add-user-pos');

function fillWithUserPosition(){
    // Si la position de l'utilisateur est connue, affiche les coordonnées dans le formulaire.
    if(isUserLocationKnown === true){
        document.querySelector('#spot_lat').value = userLat;
        document.querySelector('#spot_lng').value = userLng;
    }else{
promptGeolocationAccess()    }
}
// Si click sur "Utiliser ma position", utiliser la fn fillWithUserPosition 
btnAddUserLoc.addEventListener('click', fillWithUserPosition);

// test
function promptGeolocationAccess() {
    const confirmation = window.confirm("Pour utiliser cette fonction, veuillez activer la géolocalisation.\n\nCliquez sur 'OK' pour activer la géolocalisation ou 'Annuler' pour quitter.");

    if (confirmation) {
        // L'utilisateur a cliqué sur 'OK', vous pouvez tenter de demander la géolocalisation à nouveau.
        navigator.geolocation.watchPosition(success, error);
    } else {
        // L'utilisateur a cliqué sur 'Annuler' ou a fermé la fenêtre, vous pouvez faire quelque chose d'autre ou ne rien faire.
    }
}

</script>

<!-- Si l'utilisateur est connecté, le script js pour gérer les cliques sur la map est disponible -->
{% if app.user %}  
<script>
/*********************************GESTION DU CLICK SUR LA MAP****************************************************************/

//Appel la fonction onMapClick pour créer un Event lorsque l'on clique sur un endroit non marked de la map et indique les coordonnées
map.on('click', onMapClick);

//stockage de la fonction popup() de Leaflet dans la variable popup
var popup = L.popup();

// Lorsque je déselectionne un des champs 'spot_city, spot_cp etc..', utiliser la fonction getPosByAdress
/* getPosByAdress permet de définir de définir un marqueur grâce a l'API Nominatim, 
qui grâce a l'adresse permet de retrouver la latitude/longitude  */
document.querySelector('#spot_city').addEventListener('blur', getPosByAdress)
document.querySelector('#spot_cp').addEventListener('blur', getPosByAdress)
document.querySelector('#spot_adress').addEventListener('blur', getPosByAdress)


//Fonction pour créer un marqueur lorsque l'on clique sur un endroit de la map et renseigner les champs lat/lng du formulaire d'ajout de spot
function onMapClick(e) { 
    // on récupère les coordonnées du clic
    let pos = e.latlng

    // on affiche les coordonnées dans le formulaire
    document.querySelector('#spot_lat').value = pos.lat
    document.querySelector('#spot_lng').value = pos.lng

    //pour créer un pop up qui indique les lat/lng de l'endroit cliqué
    popup
        .setLatLng(e.latlng)
        .setContent("<a href='#' id='openFormAddSpotInPopup'>Nouveau Spot</a>")
        .openOn(map);

// Définition de l'élément "openFormAddSpotInPopup"
var addSpotByClickOnMap = document.getElementById("openFormAddSpotInPopup");

// Utilisation de la fonction openFormSpot lors de l'evement click sur l'élément openFormAddSpotInPopup
addSpotByClickOnMap.onclick = openFormSpot;

// Défini de l'élément "leaflet-popup-close-button"
var closePopupButton = document.getElementsByClassName("leaflet-popup-close-button")[0];

// Utilisation de la fonction closeFormSpot lors de l'evenement click sur l'élément "leaflet-popup-close-button"
closePopupButton.onclick = closeFormSpot;
}

        {# //fonction pour ajouter un marqueur sur la carte lors du click
        function addMarker(pos){
            if(marqueur!=undefined){
                map.removeLayer(marqueur)
            }

            marqueur = L.marker(pos, {
                //On rend le marqueur déplaçable
                draggable: true,
            })

            marqueur.addTo(map)

            //On écoute le drag&drop sur le marqueur de façon a pouvoir déplacer le marqueur et mettre aussi a jour les lat/lng
            marqueur.on("dragend", function(e){
                pos = e.target.getLatLng()
                
                document.querySelector('#spot_lat').value = pos.lat
                document.querySelector('#spot_lng').value = pos.lng
            })
        } #}

//fonction pour récupérer la pos à partir de l'adresse entrée dans le formulaire de Spot (SpotType)
function getPosByAdress(){
    //On fabrique l'adresse
    let adresse = document.querySelector('#spot_adress').value + ", " + document.
    querySelector("#spot_cp").value + " " + document.querySelector('#spot_city').value

    // On initialise une requête AJAX
    const xmlhttp = new XMLHttpRequest

    xmlhttp.onreadystatechange = () => {
        // Si la requête est terminée 
        if(xmlhttp.readyState == 4){
            // Si on a une une réponse
            if(xmlhttp.status == 200){
                //on récupère la réponse
                let response = JSON.parse(xmlhttp.response)
                
                let lat = response[0]["lat"]
                let lng = response[0]["lon"]

                document.querySelector('#spot_lat').value = lat
                document.querySelector('#spot_lng').value = lng

                let pos = [lat, lng]
                popup
                    .setLatLng(pos)
                    .setContent("<a href='#' id='openFormAddSpotInPopup'>Adresse renseignée</a>")
                    .openOn(map);

                map.setView(pos, 13)
            }
        }
    }

    // On ouvre la requête HTTP
    xmlhttp.open("get", `https://nominatim.openstreetmap.org/search?q=${adresse}&format=json&addressdetails=1&limit=1&polygon_svg=1`)
    
    xmlhttp.send()
}


/************************************FIN GESTION DU CLICK SUR LA CARTE********************************************/
</script>
{% endif %}

<script>
/*******************AFFICHER DES POINTS ISSUS DE LA BASE DE DONNEES***********************************************/

            // Convertir un tableau TWIG en tableau JS
            const markersSpots = '{{ spots | raw }}';
            const jsonTabForMarkersSpots = JSON.parse(markersSpots);

            // Parcourir le tableau et créer des marqueurs pour chaque élément
            jsonTabForMarkersSpots.forEach(obj => {
                Object.entries(obj).forEach(([name, infos]) => { 
                    const lat = infos[0]
                    const lng = infos[1]
                    const desc = infos[2]
                    const isValidate = infos[3]
                    const spotId = infos[4] 
                    const avgNote = infos[5]
                    const pictures = infos[6]

                //icon custom pour l'emplacement de l'utilisateur
                const fireIcon = L.icon({
                    iconUrl: 'https://cdn-icons-png.flaticon.com/512/5022/5022295.png',
                    iconSize: [25, 25],
                    iconAnchor: [0, 25],
                    popupAnchor: [10, -15]
                })
                // Si le spot a été validé par un admin, alors créé un marqueur
                if (isValidate){
                    const marker = L.marker([lat, lng],{
                    icon: fireIcon,
                    title: name
                    }
                    )
                    
                    marker.addTo(map);
                    
                    //pour créer l'URL de show_spot
                    var urlShowSpot = '{{ path("show_spot", {'idSpot': 'exemple_id'}) }}';
                    urlShowSpot = urlShowSpot.replace("exemple_id", spotId);
                    
                    // Pour découper une chaine de caractères après un certain nombre de car. et ajouter "..." si découpée 
                    function limitNameLenght(chaine, limite) {
                    if (chaine.length > limite) {
                        return chaine.slice(0, limite) + "...";
                    } else {
                        return chaine;
                    }
                    }
                    // le nom final, découpé 
                    const nameCut = limitNameLenght(name, 10);
                        //si la avgNote n'est pas null (c-a-d le spot a déjà été noté)
                        if(avgNote){
                        const popupContent = `<a href=${urlShowSpot}> <b>${nameCut} <i class='fa-solid fa-star'></i>(${avgNote})</b><br>${desc}<br>
                        </a>`;
                        marker.bindPopup(popupContent);
                        }else{ //Sinon on écrit 'pas de avgNote' a la place du int
                        let avgNote = '(Pas de note)';
                        const popupContent = `<a href=${urlShowSpot}> <b>${nameCut}, <i class='fa-regular fa-star'></i>${avgNote}</b><br>${desc}</a>`;
                        marker.bindPopup(popupContent);
                    }
                }
                })
            })
/************************************FIN AFFICHER DES POINTS ISSUS DE LA BASE DE DONNEES******************************/

                // Définir les coordonnées d'un polygone
                var polygonCoords = [  [48.623860, 7.727798],
                [48.604371, 7.693883],
                [48.575899, 7.686080],
                [48.568368, 7.729530],
                [48.556536, 7.741879],
                [48.540214, 7.740874],
                [48.520945, 7.753266],
                [48.517002, 7.802228],
                [48.525297, 7.830220],
                [48.548539, 7.848697],
                [48.563863, 7.858974],
                [48.586015, 7.840496],
                [48.605270, 7.820451],
                [48.610125, 7.795036],
                [48.623860, 7.727798]
                ];
                
                // Créer un polygone à partir des coordonnées stockées dans var polygonCoords et l'ajouter à la carte
                var myPolygon = L.polygon(polygonCoords, {
                    color: 'red',
                    fillColor: 'transparent',
                    weight: 2
                }).addTo(map);

    </script>

<!-- Faire le tri dans le JS -->
<script src="{{ asset('js/script.js') }}"></script>

<!-- Lien vers le fichier JavaScript de Mapbox -->
<script src='https://api.mapbox.com/mapbox-gl-js/v2.4.1/mapbox-gl.js'></script>



{% endblock %}

